env:
  WORKING_DIRECTORY: aspnet

jobs:
  restore:
    name: restore_aspnet
    runs-on: ubuntu-18.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: aspnet-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_restore
        run: dotnet restore
        working-directory: ${{ env.WORKING_DIRECTORY }}

  build:
    name: build_aspnet
    needs: restore
    runs-on: ubuntu-18.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: aspnet-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_build
        run: dotnet build
        working-directory: ${{ env.WORKING_DIRECTORY }}

  test:
    name: test_aspnet
    needs: restore
    runs-on: ubuntu-18.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: aspnet-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_test
        run: dotnet test -p:CollectCoverage=true -p:CoverletOutput=../code_coverage/ -p:CoverletOutputFormat=opencover --logger trx --results-directory ./test_coverage/
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: opencover_upload
        uses: actions/upload-artifact@v1.0.0
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/code_coverage
      - name: trx_upload
        uses: actions/upload-artifact@v1.0.0
        with:
          name: test_coverage
          path: ${{ env.WORKING_DIRECTORY }}/test_coverage

  analyze:
    name: analyze_aspnet
    needs: [build, test]
    runs-on: ubuntu-18.04
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: git_fetch
        run: git fetch --unshallow
      - name: opencover_download
        uses: actions/download-artifact@v1.0.0
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/code_coverage
      - name: trx_download
        uses: actions/download-artifact@v1.0.0
        with:
          name: test_coverage
          path: ${{ env.WORKING_DIRECTORY }}/test_coverage
      - name: sonar_install
        run: dotnet tool install --global dotnet-sonarscanner
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: aspnet-${{ hashFiles('**/packages.lock.json') }}
      - if: github.event_name == 'pull_request'
        name: sonar_scan_pull_request
        run: |
          dotnet sonarscanner begin -k:rvtr_api_lodging -o:rvtr -s:$(pwd)/sonar.analysis.xml
          dotnet build
          dotnet sonarscanner end
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'
        name: sonar_scan
        run: |
          dotnet sonarscanner begin -k:rvtr_api_lodging -o:rvtr -s:$(pwd)/sonar.analysis.xml
          dotnet build
          dotnet sonarscanner end
        working-directory: ${{ env.WORKING_DIRECTORY }}

  pack:
    name: pack_job
    needs: [analyze]
    runs-on: ubuntu-18.04
    steps:
      - name: pack_script
        run: echo 'pack script'

name: build

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
