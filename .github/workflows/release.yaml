env:
  CACHE_KEY_PREFIX: aspnet-lodging
  WORKING_DIRECTORY: aspnet

jobs:
  restore:
    name: restore_aspnet
    runs-on: ubuntu-18.04
    if: '!github.event.repository.fork'
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_restore
        run: dotnet restore
        working-directory: ${{ env.WORKING_DIRECTORY }}

  build:
    name: build_aspnet
    needs: restore
    runs-on: ubuntu-18.04
    if: '!github.event.repository.fork'
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_build
        run: dotnet build
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - if: startsWith(github.ref, 'refs/heads/master')
        name: dotnet_publish_head
        run: dotnet publish --configuration Debug --output drop RVTR.Lodging.WebApi/*.csproj
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - if: startsWith(github.ref, 'refs/tags/')
        name: dotnet_publish
        run: dotnet publish --configuration Release --output drop RVTR.Lodging.WebApi/*.csproj
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: drop_upload
        uses: actions/upload-artifact@v1.0.0
        with:
          name: drop
          path: ${{ env.WORKING_DIRECTORY }}/drop

  test:
    name: test_aspnet
    needs: restore
    runs-on: ubuntu-18.04
    if: '!github.event.repository.fork'
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: dotnet_test
        run: |
          dotnet test \
          -p:CollectCoverage=true \
          -p:CoverletOutput=../code_coverage/ \
          -p:CoverletOutputFormat=opencover \
          --logger trx \
          --results-directory ./test_coverage/
        working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: opencover_upload
        uses: actions/upload-artifact@v1.0.0
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/code_coverage
      - name: trx_upload
        uses: actions/upload-artifact@v1.0.0
        with:
          name: test_coverage
          path: ${{ env.WORKING_DIRECTORY }}/test_coverage

  analyze:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: analyze_aspnet
    needs: [build, test]
    runs-on: ubuntu-18.04
    if: '!github.event.repository.fork'
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: git_fetch
        run: git fetch --unshallow
      - name: opencover_download
        uses: actions/download-artifact@v1.0.0
        with:
          name: code_coverage
          path: ${{ env.WORKING_DIRECTORY }}/code_coverage
      - name: trx_download
        uses: actions/download-artifact@v1.0.0
        with:
          name: test_coverage
          path: ${{ env.WORKING_DIRECTORY }}/test_coverage
      - name: sonar_install
        run: dotnet tool install --global dotnet-sonarscanner
      - name: dotnet_cache
        uses: actions/cache@v1.1.2
        with:
          path: ~/.nuget/packages
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/packages.lock.json') }}
      - name: sonar_scan
        run: |
          dotnet sonarscanner begin -k:rvtr_api_lodging -o:rvtr -s:$(pwd)/sonar.analysis.xml
          dotnet build
          dotnet sonarscanner end
        working-directory: ${{ env.WORKING_DIRECTORY }}

  pack:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: pack_aspnet
    needs: [analyze]
    runs-on: ubuntu-18.04
    if: '!github.event.repository.fork'
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: drop_download
        uses: actions/download-artifact@v1.0.0
        with:
          name: drop
      - name: docker_login
        run: echo ${GITHUB_TOKEN} | docker login --username ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
      - name: docker_build
        run: docker image build --file .docker/aspnet.dockerfile --tag lodging drop
      - if: startsWith(github.ref, 'refs/heads/master')
        name: docker_push_head
        run: |
          docker image tag lodging docker.pkg.github.com/rvtr/rvtr-api-lodging/lodging:master-aspnet-rest
          docker image push docker.pkg.github.com/rvtr/rvtr-api-lodging/lodging:master-aspnet-rest
      - if: startsWith(github.ref, 'refs/tags/')
        name: docker_push
        run: |
          docker image tag lodging docker.pkg.github.com/rvtr/rvtr-api-lodging/lodging:aspnet-rest
          docker image push docker.pkg.github.com/rvtr/rvtr-api-lodging/lodging:aspnet-rest
      - name: docker_logout
        run: docker logout

  deploy:
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    needs: pack
    runs-on: ubuntu-18.04
    if: '!github.event.repository.fork'
    steps:
      - name: actions_checkout
        uses: actions/checkout@v2.1.0
      - name: az_login
        run: az login --password ${AZURE_CLIENT_SECRET} --service-principal --tenant ${AZURE_TENANT_ID} --username ${AZURE_CLIENT_ID}
      - name: az_aks
        run: az aks get-credentials --name rvtr-k8s-main --overwrite-existing --resource-group rvtr-grp-main
      - name: kubectl_apply
        run: kubectl apply --filename .kubernetes/
      - name: az_logout
        run: az logout

name: release

on:
  push:
    branches:
      - master
    tags:
      - '*'
